#####################################################################
# 	Macros
#####################################################################
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode: 
    #parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}

    M106 S0
    LED_ON
    M140 S{bedtemp}          ; set bed temperature
    M104 S200                ; set extruder temp
    M117 Homing...                 ; display message
    G28 Y0 X0 Z0
    Z_TILT_ADJUST
    #BED_MESH_CALIBRATE
    G28 Y0 X0 Z0
    BED_MESH_PROFILE LOAD=default
    G1 X75 Y0 Z2.5             ; moves toolhead to front left corner
    M104 S{hotendtemp}       ; set hotend temperature
    M117 Heating...
    LED_RED
    M190 S{bedtemp}          ; set bed temperature and wait for it to be reached
    M109 S{hotendtemp}     ; set temperature and wait for it to be reached
    LED_ON
    M117 Printing...
    #PURGE_LINE
   

[gcode_macro PURGE_LINE]
gcode:
   G92 E0                              																; reset Extruder
	G1 X0 Y0 Z0.3 F19500.0           																	; move to start position
	G1 X0 Y100.0 Z0.3 F1500.0 E15     																	; draw the first line
	G92 E0                              																; reset Extruder
	G1 Z2.0 F3000
    M117 Printing...


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(200) %}      #edit to your park position
    {% set y = params.Y|default(200) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    {%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
    {%set act_extrude_temp = printer.extruder.temperature|int %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if act_extrude_temp > min_extrude_temp %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    {%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
    {%set act_extrude_temp = printer.extruder.temperature|int %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if act_extrude_temp > min_extrude_temp %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    CANCEL_PRINT_BASE
    LED_ON
    M106 S0
    M18

[gcode_macro G29]
gcode:
   G28
   Z_TILT_ADJUST
   BED_MESH_CLEAR
   BED_MESH_CALIBRATE

[gcode_macro CG28]
gcode:
   {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
   G28
   {% endif %}
#Conditional G28 (home if not already homed)

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1

[gcode_macro PURGE_LINE]
gcode:
    _CG28
    G0 X115 Y5 Z0.2 F9000         ; Move to start position
    G92 E0                        ; Reset Extruder
    G1 E10 F600                   ; Extrude a little
    G1 X10 E20 F1000              ; Draw line
    G92 E0                        ; Reset Extruder
    G91                           ; relative positioning
    G0 X50 F18000                 ; Wipe line 1
    G0 X-40 F18000                ; Wipe line 2
    G0 Z10 F1000                  ; Raise nozzle
    G90

[gcode_macro LED_ON]
gcode:
    SET_LED LED=my_neopixel RED=1 GREEN=1 BLUE=1
    SET_LED LED=my_neopixel2 RED=1 GREEN=1 BLUE=1

[gcode_macro LED_OFF]
gcode:
    SET_LED LED=my_neopixel blue=0 red=0 green=0
    SET_LED LED=my_neopixel2 blue=0 red=0 green=0

[gcode_macro LED_BLUE]
gcode:
    SET_LED LED=my_neopixel BLUE=1
    SET_LED LED=my_neopixel2 BLUE=1

[gcode_macro LED_RED]
gcode:
    SET_LED LED=my_neopixel red=1
    SET_LED LED=my_neopixel2 red=1

[gcode_macro reset_BLTouch]
gcode:
    BLTOUCH_DEBUG COMMAND=reset
[gcode_macro test_BLTouch]
gcode:
    BLTOUCH_DEBUG COMMAND=self_test



[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script
gcode:
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600               ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y} F3600   ; park nozzle at rear
    M18
    LED_BLUE
    M117 Finished!

[gcode_macro standby]
gcode:
    LED_OFF
    M117 Standby

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

[gcode_macro preheat]
gcode:
    M140 S100           ; set bed temperature
    M104 S200           ; set extruder temp
    M117 Preheating...       ; display message
    LED_RED              ; set led to red
    G28 Y0 X0 Z0         ; home  
    G1 X115 Y95         ; move to center of bed
    #M106 S255            ; set part fan 100%
    M18 
[gcode_macro pidtune_bed]
gcode:
 PID_CALIBRATE HEATER=heater_bed TARGET=80

[gcode_macro pidtune_hotend]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=280

[idle_timeout]
gcode:
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60